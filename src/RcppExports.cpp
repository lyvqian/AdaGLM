// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// LogLik
double LogLik(const arma::mat& X, const arma::vec& y, std::string fam_link, const arma::vec& beta);
RcppExport SEXP _AdaGLM_LogLik(SEXP XSEXP, SEXP ySEXP, SEXP fam_linkSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type fam_link(fam_linkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik(X, y, fam_link, beta));
    return rcpp_result_gen;
END_RCPP
}
// Deviance
double Deviance(const arma::mat& X, const arma::vec& y, const arma::vec& beta, std::string fam_link);
RcppExport SEXP _AdaGLM_Deviance(SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP fam_linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< std::string >::type fam_link(fam_linkSEXP);
    rcpp_result_gen = Rcpp::wrap(Deviance(X, y, beta, fam_link));
    return rcpp_result_gen;
END_RCPP
}
// adaglm
List adaglm(const arma::mat& X, const arma::vec& y, std::string fam_link, std::string optimizer, double alpha, double rho, int max_iter, double tol);
RcppExport SEXP _AdaGLM_adaglm(SEXP XSEXP, SEXP ySEXP, SEXP fam_linkSEXP, SEXP optimizerSEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type fam_link(fam_linkSEXP);
    Rcpp::traits::input_parameter< std::string >::type optimizer(optimizerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(adaglm(X, y, fam_link, optimizer, alpha, rho, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_AdaGLM_LogLik", (DL_FUNC) &_AdaGLM_LogLik, 4},
    {"_AdaGLM_Deviance", (DL_FUNC) &_AdaGLM_Deviance, 4},
    {"_AdaGLM_adaglm", (DL_FUNC) &_AdaGLM_adaglm, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_AdaGLM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
